plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.5.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.liquibase.gradle' version '2.0.3'
    id 'nu.studer.jooq' version '5.2.1'
}

bootJar.enabled(false)
jar.enabled(true)

group 'io.dsub.discogs'
version '0.0.2.10'

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    jooqGenerator 'org.postgresql:postgresql'
    implementation(
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-aop',
            'org.projectlombok:lombok',
            'org.springframework.boot:spring-boot-starter-jooq'
    )
    liquibaseRuntime (
            'org.liquibase:liquibase-core:3.8.1',
            'org.liquibase:liquibase-groovy-dsl:2.1.1',
            'javax.xml.bind:jaxb-api:2.3.1',
            'org.postgresql:postgresql',
            'org.yaml:snakeyaml:1.15'
    )
    annotationProcessor(
            'org.projectlombok:lombok'
    )
}

// publish
def props = new Properties()
if (file(".env").exists()) {
    file(".env").withInputStream { props.load(it) }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/state303/discogs-common")
            credentials {
                username = props.getProperty("USERNAME") ?: System.getenv("USERNAME")
                password = props.getProperty("PKG_TOKEN") ?: System.getenv("PKG_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = 'discogs-common'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}

// jooq
jooq {
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = props.getProperty("POSTGRES_URL") ?: System.getenv("POSTGRES_URL")
                    user = props.getProperty("POSTGRES_USER") ?: System.getenv("POSTGRES_USER")
                    password = props.getProperty("POSTGRES_PASSWORD") ?: System.getenv("POSTGRES_PASSWORD")
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        inputSchema = 'public'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = false
                        fluentSetters = true
                    }
                    target {
                        packageName = 'io.dsub.discogs.common.jooq.postgres'
                        directory = "build/generated-postgres/main"  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.example.JPrefixGeneratorStrategy'
                }
            }
        }
    }
}

liquibase {
    activities {
        configure {
            main {
                changeLogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
                url props.getProperty("POSTGRES_URL") ?: System.getenv("POSTGRES_URL")
                username props.getProperty("POSTGRES_USER") ?: System.getenv("POSTGRES_USER")
                password props.getProperty("POSTGRES_PASSWORD") ?: System.getenv("POSTGRES_PASSWORD")
                changeSetAuthor props.getProperty("AUTHOR") ?: System.getenv("AUTHOR")
            }
        }
    }
}

// participates for gradle incremental build
tasks.named('generateJooq').configure {
    // make jOOQ task participate in incremental builds (which is also a prerequisite for participating in build caching)
    allInputsDeclared = true

    // make jOOQ task participate in build caching
    outputs.cacheIf { true }
}
