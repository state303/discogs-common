import java.util.function.Function

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.5.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.liquibase.gradle' version '2.0.3'
    id 'nu.studer.jooq' version '5.2.2'
}

bootJar.enabled(false)
jar.enabled(true)

group 'io.dsub.jooq'
version '0.0.2.16'

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    jooqGenerator (
            'org.slf4j:slf4j-simple:1.7.9',
            'org.postgresql:postgresql',
            'org.testcontainers:postgresql:1.15.3',
            'mysql:mysql-connector-java'
    )
    implementation(
            'org.jooq:jooq',
            'org.projectlombok:lombok'
    )
    liquibaseRuntime (
            'org.liquibase:liquibase-core:3.8.1',
            'org.liquibase:liquibase-groovy-dsl:2.1.1',
            'javax.xml.bind:jaxb-api:2.3.1',
            'org.postgresql:postgresql',
            'org.yaml:snakeyaml:1.15'
    )
    annotationProcessor(
            'org.projectlombok:lombok'
    )
}

// publish
def props = new Properties()
if (file(".env").exists()) {
    file(".env").withInputStream { props.load(it) }
}

Function<String, String> getPropVal = name -> {
    props.getProperty(name) ?: System.getenv(name)
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/state303/discogs-jooq")
            credentials {
                username = getPropVal("USERNAME");
                password = getPropVal("PKG_TOKEN");
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = 'discogs-jooq'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}

// jooq
jooq {
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = "org.testcontainers.jdbc.ContainerDatabaseDriver"
                    url = "jdbc:tc:postgresql:///databasename?TC_INITSCRIPT=file:${projectDir}/src/main/resources/postgresql-init.sql"
                }
                generator {
                    name = 'org.jooq.codegen.JavaGenerator'
                    database {
                        inputSchema = 'public'
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = false
                        fluentSetters = true
                        javaTimeTypes = true
                    }
                    target {
                        packageName = 'io.dsub.discogs.jooq'
                        directory = "build/generated/main"  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

liquibase {
    activities {
        configure {
            main {
                changeLogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
                url getPropVal('POSTGRES_URL')
                username getPropVal('POSTGRES_USER')
                password getPropVal('POSTGRES_PASSWORD')
                changeSetAuthor getPropVal('AUTHOR')
            }
        }
    }
}

tasks.named('generateJooq').configure {
    // make jOOQ task participate in incremental builds (which is also a prerequisite for participating in build caching)
    allInputsDeclared = true

    // make jOOQ task participate in build caching
    outputs.cacheIf { true }
}

sourceSets.main.java.srcDirs (tasks.named('generateJooq').flatMap { it.outputDir })