plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.5.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

bootJar.enabled(false)
jar.enabled(true)

group 'io.dsub.discogs'
version '0.0.2.2'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    implementation(
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'org.springframework.boot:spring-boot-starter-aop',
            'org.projectlombok:lombok',
            'com.querydsl:querydsl-core',
            'com.querydsl:querydsl-jpa'
    )
    annotationProcessor (
            'org.projectlombok:lombok',
            'jakarta.persistence:jakarta.persistence-api',
            'jakarta.annotation:jakarta.annotation-api'
    )
    annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa")
}

// querydsl
def generated='src/main/querydsl'

sourceSets {
    main.java.srcDirs += [ generated ]
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file(generated)
}

task cleanGeneatedDir(type: Delete) {
    delete file('src/main/querydsl')
}

// publish
def props = new Properties()
if (file(".env").exists()) {
    file(".env").withInputStream { props.load(it) }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/state303/discogs-common")
            credentials {
                username = props.getProperty("USERNAME") ?: System.getenv("USERNAME")
                password = props.getProperty("PKG_TOKEN") ?: System.getenv("PKG_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = 'discogs-common'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}